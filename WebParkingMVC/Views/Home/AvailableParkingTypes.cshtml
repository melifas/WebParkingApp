@model IEnumerable<LibraryWebParking.Model.spgetAvailableparkingsTypeCount>

@{
    ViewBag.Title = "AvailableParkingTypes";


    var startDate = ((DateTime)ViewBag.startDate).ToString("yyyy-MM-dd");
    var endDate = ((DateTime)ViewBag.endDate).ToString("yyyy-MM-dd");



}

<h2>Διαθεσιμότητα Θέσεων</h2>

<div class="row  border-bottom white-bg dashboard-header">


    <div class="col-sm-6">
        @using (Html.BeginForm("AvailableParkingTypes", "Home", FormMethod.Post))
        {




            <div class="ibox-content">

                <div class="form-group" id="data_1">
                    <label class="font-noraml">Αρχική Ημερομηνία</label>
                    <div class="input-group date">
                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span><input type="date" name="startDate" value="@startDate"
                    </div>
                </div>

                <div class="form-group" id="data_2">
                    <label class="font-noraml">Τελική Ημερομηνία</label>
                    <div class="input-group date">
                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span><input type="date" name="endDate" value="@endDate" />
                    </div>
                </div>

                <div class="input-group date">
                    <input type="submit" value="Έλεγχος" />
                </div>
            </div>


            <table class="table  table-hover">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Desription)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.remainingPositions)
                    </th>
                </tr>

                @foreach (var parkingType in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => parkingType.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => parkingType.Desription)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => parkingType.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => parkingType.remainingPositions)
                        </td>
                        <td>
                            @Html.ActionLink("Κάνε Κράτηση", "BookRoom", "Book", new { @id = parkingType.Id, @start = startDate, @end = endDate }, null)

                        </td>
                    </tr>
                }

            </table>
        }
    </div>
    <div class="col-sm-6">
        <div class="statistic-box">
            <h4 style="text-align:center">
                Διαθεσιμότητα θέσεων Parking
            </h4>
            <p>

            </p>
            <div class="row text-center">
                <div class="col-lg-12">
                    <canvas id="polarChart" width="300" height="300"></canvas>
                    <h5>Γραφική απεικόνιση θέσεων</h5>
                </div>

            </div>

        </div>
    </div>

</div>



<div class="small-chat-box fadeInRight animated">

    <div class="heading" draggable="true">
        <small class="chat-date pull-right">
            02.19.2015
        </small>
        Small chat
    </div>

    <div class="content">

        <div class="left">
            <div class="author-name">
                Monica Jackson <small class="chat-date">
                    10:02 am
                </small>
            </div>
            <div class="chat-message active">
                Lorem Ipsum is simply dummy text input.
            </div>

        </div>
        <div class="right">
            <div class="author-name">
                Mick Smith
                <small class="chat-date">
                    11:24 am
                </small>
            </div>
            <div class="chat-message">
                Lorem Ipsum is simpl.
            </div>
        </div>
        <div class="left">
            <div class="author-name">
                Alice Novak
                <small class="chat-date">
                    08:45 pm
                </small>
            </div>
            <div class="chat-message active">
                Check this stock char.
            </div>
        </div>
        <div class="right">
            <div class="author-name">
                Anna Lamson
                <small class="chat-date">
                    11:24 am
                </small>
            </div>
            <div class="chat-message">
                The standard chunk of Lorem Ipsum
            </div>
        </div>
        <div class="left">
            <div class="author-name">
                Mick Lane
                <small class="chat-date">
                    08:45 pm
                </small>
            </div>
            <div class="chat-message active">
                I belive that. Lorem Ipsum is simply dummy text.
            </div>
        </div>


    </div>
    <div class="form-chat">
        <div class="input-group input-group-sm">
            <input type="text" class="form-control"> <span class="input-group-btn">
                <button class="btn btn-primary" type="button">
                    Send
                </button>
            </span>
        </div>
    </div>

</div>
<div id="small-chat">

    <span class="badge badge-warning pull-right">5</span>
    <a class="open-small-chat">
        <i class="fa fa-comments"></i>

    </a>
</div>

@section Scripts {
    @Scripts.Render("~/plugins/flot")
    @Scripts.Render("~/plugins/sparkline")
    @Scripts.Render("~/plugins/chartJs")
    @Scripts.Render("~/plugins/peity")

    <script type="text/javascript">
        $(document).ready(function () {

            $(".bar_dashboard").peity("bar", {
                fill: ["#1ab394", "#d7d7d7"],
                width: 100
            })

            $("#sparkline8").sparkline([5, 6, 7, 2, 0, 4, 2, 4, 5, 7, 2, 4, 12, 14, 4, 2, 14, 12, 7], {
                type: 'bar',
                barWidth: 8,
                height: '150px',
                barColor: '#1ab394',
                negBarColor: '#c6c6c6'
            });

            var updatingChart = $(".updating-chart").peity("line", { fill: '#1ab394', stroke: '#169c81', width: 64 })

            setInterval(function () {
                var random = Math.round(Math.random() * 10)
                var values = updatingChart.text().split(",")
                values.shift()
                values.push(random)

                updatingChart
                    .text(values.join(","))
                    .change()
            }, 1000);

            var data1 = [
                [0, 4], [1, 8], [2, 5], [3, 10], [4, 4], [5, 16], [6, 5], [7, 11], [8, 6], [9, 11], [10, 30], [11, 10], [12, 13], [13, 4], [14, 3], [15, 3], [16, 6]
            ];
            var data2 = [
                [0, 1], [1, 0], [2, 2], [3, 0], [4, 1], [5, 3], [6, 1], [7, 5], [8, 2], [9, 3], [10, 2], [11, 1], [12, 0], [13, 2], [14, 8], [15, 0], [16, 0]
            ];
            $("#flot-dashboard-chart").length && $.plot($("#flot-dashboard-chart"), [
                data1, data2
            ],
                    {
                        series: {
                            lines: {
                                show: false,
                                fill: true
                            },
                            splines: {
                                show: true,
                                tension: 0.4,
                                lineWidth: 1,
                                fill: 0.4
                            },
                            points: {
                                radius: 0,
                                show: true
                            },
                            shadowSize: 2
                        },
                        grid: {
                            hoverable: true,
                            clickable: true,
                            tickColor: "#d5d5d5",
                            borderWidth: 1,
                            color: '#d5d5d5'
                        },
                        colors: ["#1ab394", "#464f88"],
                        xaxis: {
                        },
                        yaxis: {
                            ticks: 4
                        },
                        tooltip: false
                    }
            );

            var doughnutData = [
                {
                    value: 300,
                    color: "#a3e1d4",
                    highlight: "#1ab394",
                    label: "App"
                },
                {
                    value: 50,
                    color: "#dedede",
                    highlight: "#1ab394",
                    label: "Software"
                },
                {
                    value: 100,
                    color: "#b5b8cf",
                    highlight: "#1ab394",
                    label: "Laptop"
                }
            ];



            var polarData = [

@{
                    foreach (var item in Model)
                    {

<text>
                {
                    value: @item.remainingPositions,
                    color: "#dedede",
                    highlight: "#1ab394",
                    label: "@item.Title"
                },

</text>

    }
}
            ];

                        var polarOptions = {
                scaleShowLabelBackdrop: true,
                scaleBackdropColor: "rgba(255,255,255,0.75)",
                scaleBeginAtZero: true,
                scaleBackdropPaddingY: 1,
                scaleBackdropPaddingX: 1,
                scaleShowLine: true,
                segmentShowStroke: true,
                segmentStrokeColor: "#fff",
                segmentStrokeWidth: 2,
                animationSteps: 100,
                animationEasing: "easeOutBounce",
                animateRotate: true,
                animateScale: false,
            };
                    var ctx = document.getElementById("polarChart").getContext("2d");
                    var Polarchart = new Chart(ctx).PolarArea(polarData, polarOptions);

                    });
    </script>
}
